/*! third party licenses: js/vendor.LICENSE.txt */
import{o as y,d as l,b as u,c as w}from"./constants-C1shV9FP.chunk.mjs";import{c as o}from"./index-BmkWHhSR.chunk.mjs";import{_ as p,v as c,a as x}from"./NcNoteCard-DG3F-LUj.chunk.mjs";import{s as h}from"./_plugin-vue2_normalizer-jrlE7CJU-B-cIoeGj.chunk.mjs";import{s as f}from"./vue.runtime.esm-DBajT-mq.chunk.mjs";const V=y("store",{state:()=>({loading:{tables:!0,viewsShared:!0,contexts:!0},tables:[],views:[],templates:[],contexts:[],activeViewId:null,activeTableId:null,activeRowId:null,activeElementIsView:!1,activeContextId:null,appNavCollapsed:!1}),getters:{getTable:e=>a=>e.tables.find(s=>s.id===a),getContext:e=>a=>e.contexts.find(s=>s.id===a),getView:e=>a=>e.views.find(s=>s.id===a),activeView:e=>e.views&&e.activeViewId?e.views.find(a=>a.id===e.activeViewId):null,activeTable:e=>e.tables&&e.activeTableId?e.tables.find(a=>a.id===e.activeTableId):null,activeElement(e){return e.activeTableId&&e.tables?e.tables.find(a=>a.id===e.activeTableId):e.views&&e.activeViewId?e.views.find(a=>a.id===e.activeViewId):null},activeContext:e=>e.contexts&&e.activeContextId?e.contexts.find(a=>a.id===e.activeContextId):null,isView:e=>e.activeElementIsView,isLoading:e=>a=>e.loading[a]??!1,isLoadingSomething:e=>Object.keys(e.loading).filter(a=>e.loading[a]).length>0},actions:{setAppNavCollapsed(e){this.appNavCollapsed=!!e},setLoading({key:e,value:a}){this.loading[e]=!!a},setActiveViewId(e){this.activeViewId!==e&&(this.activeViewId=e,this.activeTableId=null,this.activeElementIsView=!0)},setActiveTableId(e){this.activeTableId!==e&&(this.activeTableId=e,this.activeViewId=null,this.activeElementIsView=!1)},setActiveContextId(e){this.activeContextId!==e&&(this.activeContextId=parseInt(e))},setTables(e){this.tables=e},setViews(e){this.views=e},setTemplates(e){this.templates=e},setContexts(e){this.contexts=e},setTable(e){const a=this.tables.findIndex(s=>s.id===e.id);this.tables.splice(a,1,e)},setView(e){const a=this.views.findIndex(s=>s.id===e.id);this.views[a]=e},setContext(e){const a=this.contexts.findIndex(s=>s.id===e.id);this.contexts[a]=e},setActiveRowId(e){this.activeRowId=e},async insertNewTable({data:e}){let a=null;try{a=(await o.post(c("/apps/tables/api/2/tables"),e)).data.ocs}catch(i){return l(i,t("tables","Could not insert table.")),!1}const s=this.tables;return s.push(a.data),this.setTables(s),a.data},async loadTablesFromBE(){this.setLoading({key:"tables",value:!0});try{const e=await o.get(p("/apps/tables/table"));this.setTables(e.data),this.views=[],e.data.forEach(a=>{a.views&&(this.views=this.views.concat(a.views))})}catch(e){l(e,t("tables","Could not load tables.")),h(t("tables","Could not fetch tables"))}return this.setLoading({key:"tables",value:!1}),!0},async loadViewsSharedWithMeFromBE(){this.setLoading({key:"viewsShared",value:!0});try{(await o.get(p("/apps/tables/view"))).data.forEach(e=>{this.views.filter(a=>a.id===e.id).length===0&&this.views.push(e)})}catch(e){l(e,t("tables","Could not load shared views.")),h(t("tables","Could not load shared views"))}return this.setLoading({key:"viewsShared",value:!1}),!0},async loadTemplatesFromBE(){try{const e=await o.get(p("/apps/tables/table/templates"));this.templates=e.data}catch(e){l(e,t("tables","Could not load templates.")),h(t("tables","Could not fetch templates"))}},async insertNewView({data:e}){let a=null;try{a=await o.post(p("/apps/tables/view"),e)}catch(i){return l(i,t("tables","Could not insert view.")),!1}const s=this.views;return s.push(a.data),this.setViews(s),this.tables.find(i=>i.id===a.data.tableId).views.push(a.data),a.data.id},async updateView({id:e,data:a}){let s=null;try{s=await o.put(p("/apps/tables/view/"+e),a)}catch(r){return l(r,t("tables","Could not update view.")),!1}const i=s.data,n=this.views,d=n.findIndex(r=>r.id===i.id);return n[d]=i,this.setViews([...n]),!0},async removeView({viewId:e}){try{await o.delete(p("/apps/tables/view/"+e))}catch(i){return l(i,t("tables","Could not remove view.")),!1}const a=this.views,s=a.findIndex(i=>i.id===e);return a.splice(s,1),this.setViews([...a]),!0},async reloadViewsOfTable({tableId:e}){let a=null;try{a=await o.get(p("/apps/tables/view/table/"+e));const s=this.views;a.data.forEach(i=>{const n=s.findIndex(d=>d.id===i.id);f(this.views,n,i)})}catch(s){return l(s,t("tables","Could not reload view.")),!1}return!0},async updateTable({id:e,data:a}){let s=null;try{s=(await o.put(c("/apps/tables/api/2/tables/"+e),a)).data.ocs}catch(d){return l(d,t("tables","Could not update table.")),!1}const i=s.data,n=this.tables.findIndex(d=>d.id===i.id);return f(this.tables,n,i),!0},async favoriteView({id:e}){try{await o.post(c(`/apps/tables/api/2/favorites/${w}/${e}`))}catch(i){return l(i,t("tables","Could not mark view as favorite")),!1}const a=this.views.findIndex(i=>i.id===e),s=this.views[a];return s.favorite=!0,this.setView(s),!0},async removeFavoriteView({id:e}){try{await o.delete(c(`/apps/tables/api/2/favorites/${w}/${e}`))}catch(i){return l(i,t("tables","Could not remove view from favorites")),!1}const a=this.views.findIndex(i=>i.id===e),s=this.views[a];return s.favorite=!1,this.setView(s),!0},async favoriteTable({id:e}){try{await o.post(c(`/apps/tables/api/2/favorites/${u}/${e}`))}catch(i){return l(i,t("tables","Could not mark table as favorite")),!1}const a=this.tables.findIndex(i=>i.id===e),s=this.tables[a];return s.favorite=!0,this.setTable(s),!0},async removeFavoriteTable({id:e}){try{await o.delete(c(`/apps/tables/api/2/favorites/${u}/${e}`))}catch(i){return l(i,t("tables","Could not remove table from favorites")),!1}const a=this.tables.findIndex(i=>i.id===e),s=this.tables[a];return s.favorite=!1,this.setTable(s),!0},async shareContext({id:e,previousReceivers:a,receivers:s,displayMode:i}){const n={nodeType:"context",nodeId:e,displayMode:i};try{for(const d of s)if(n.receiverType=d.isUser?"user":"group",n.receiver=d.id,!a.find(r=>r.receiver===n.receiver&&r.receiver_type===n.receiverType)){const r=await o.post(p("/apps/tables/share"),n);if(r?.data&&r?.data?.id){const v=r.data.id;await this.updateDisplayMode({shareId:v,displayMode:i,target:"default"}),d.id===x().uid&&await this.updateDisplayMode({shareId:v,displayMode:i,target:"self"})}}}catch(d){l(d,t("tables","Could not add application share."))}try{for(const d of a)if(!s.find(r=>{const v=r.isUser?"user":"group";return r.id===d.receiver&&v===d.receiver_type}))await o.delete(p("/apps/tables/share/"+d.share_id));else{const r=d.share_id;await this.updateDisplayMode({shareId:r,displayMode:i,target:"default"})}}catch(d){l(d,t("tables","Could not remove application share."))}},async updateDisplayMode({shareId:e,displayMode:a,target:s}){try{await o.put(p("/apps/tables/share/"+e+"/display-mode"),{displayMode:a,target:s})}catch(i){l(i,t("tables","Could not update display mode."))}},async insertNewContext({data:e,receivers:a,displayMode:s}){this.setLoading({key:"contexts",value:!0});let i=null;try{i=await o.post(c("/apps/tables/api/2/contexts"),e);const d=i?.data?.ocs?.data?.id;d&&await this.shareContext({id:d,previousReceivers:[],receivers:a,displayMode:s})}catch(d){return l(d,t("tables","Could not insert application.")),!1}const n=this.contexts;return n.push(i.data.ocs.data),this.setContexts(n),this.setLoading({key:"contexts",value:!1}),i.data.ocs.data},async updateContext({id:e,data:a,previousReceivers:s,receivers:i,displayMode:n}){let d=null;try{d=await o.put(c("/apps/tables/api/2/contexts/"+e),a),await this.shareContext({id:e,previousReceivers:s,receivers:i,displayMode:n})}catch(b){return l(b,t("tables","Could not update application.")),!1}const r=d.data.ocs.data,v=this.contexts.findIndex(b=>b.id===r.id);return f(this.contexts,v,r),!0},async transferTable({id:e,data:a}){try{await o.put(c("/apps/tables/api/2/tables/"+e+"/transfer"),a)}catch(n){return l(n,t("tables","Could not transfer table.")),!1}const s=this.tables,i=s.findIndex(n=>n.id===e);return s.splice(i,1),this.setTables([...s]),!0},async getAllContexts(){this.setLoading({key:"contexts",value:!0});try{const e=await o.get(c("/apps/tables/api/2/contexts"));this.contexts=e.data.ocs.data,await this.getContextsTablesAndViews()}catch(e){l(e,t("tables","Could not load applications.")),h(t("tables","Could not fetch applications"))}return this.setLoading({key:"contexts",value:!1}),!0},async loadContext({id:e}){try{const a=await o.get(c("/apps/tables/api/2/contexts/"+e));this.setContext(a.data.ocs.data)}catch(a){l(a,t("tables","Could not load application.")),h(t("tables","Could not fetch application"))}return!0},async getContextsTablesAndViews(){for(const e of this.contexts)for(const a of Object.values(e?.nodes))parseInt(a.node_type)===u?await this.loadContextTable({id:a.node_id}):parseInt(a.node_type)===w&&await this.loadContextView({id:a.node_id})},async loadContextTable({id:e}){if(this.tables.find(s=>s.id===e))return!0;let a;try{a=await o.get(c("/apps/tables/api/2/tables/"+e));const s=this.tables;s.push(a.data.ocs.data),this.setTables([...s])}catch(s){l(s,t("tables","Could not load table.")),h(t("tables","Could not fetch table"))}return a?.data.ocs.data},async loadContextView({id:e}){if(this.views.find(s=>s.id===e))return!0;let a;try{a=await o.get(p("/apps/tables/view/"+e));const s=this.views;s.push(a.data),this.setViews([...s])}catch(s){l(s,t("tables","Could not load view")),h(t("tables","Could not fetch view"))}return a?.data},async transferContext({id:e,data:a}){try{await o.put(c("/apps/tables/api/2/contexts/"+e+"/transfer"),a)}catch(n){return l(n,t("tables","Could not transfer application.")),!1}const s=this.contexts,i=s.findIndex(n=>n.id===e);return s.splice(i,1),this.setContexts([...s]),!0},async removeContext({context:e}){try{await o.delete(c("/apps/tables/api/2/contexts/"+e.id))}catch(i){return l(i,t("tables","Could not remove application.")),!1}const a=this.contexts,s=a.findIndex(i=>i.id===e.id);return a.splice(s,1),this.setContexts([...a]),!0},async removeTable({tableId:e}){try{await o.delete(p("/apps/tables/table/"+e))}catch(i){return l(i,t("tables","Could not remove table.")),!1}const a=this.tables,s=a.findIndex(i=>i.id===e);return a.splice(s,1),this.setTables([...a]),!0},setTableHasShares({tableId:e,hasShares:a}){const s=this.tables.find(i=>i.id===e);s&&(s.hasShares=!!a)},setViewHasShares({viewId:e,hasShares:a}){const s=this.views.find(i=>i.id===e);s&&(s.hasShares=!!a)}}});export{V as useTablesStore};
//# sourceMappingURL=store-Cvxj8Vav.chunk.mjs.map
